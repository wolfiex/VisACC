{
  "version": 3,
  "file": "bintray.js",
  "sourceRoot": "",
  "sources": [
    "../../src/publish/bintray.ts"
  ],
  "names": [],
  "mappings": ";;AAAA,iCAA+B,AAAkB,AAEjD,AAAC;AAcD;AAKE,gBAAmB,AAAa,OAAS,AAAmB,aAAE,AAAa,MAAE,AAAsB;AAAhF,aAAK,QAAL,AAAK,AAAQ;AAAS,aAAW,cAAX,AAAW,AAAQ;AAC1D,AAAE,AAAC,YAAC,AAAK,SAAI,AAAI,AAAC,MAAC,AAAC;AAClB,kBAAM,IAAI,AAAK,MAAC,AAAwB,AAAC,AAC3C;AAAC;AACD,AAAE,AAAC,YAAC,AAAW,eAAI,AAAI,AAAC,MAAC,AAAC;AACxB,kBAAM,IAAI,AAAK,MAAC,AAA0B,AAAC,AAC7C;AAAC;AAED,AAAI,aAAC,AAAI,OAAG,AAAI,QAAI,AAAS;AAC7B,AAAI,aAAC,AAAI,OAAG,AAAM,UAAI,AAAI,OAAG,AAAI,AAAG,iBAAS,IAAI,AAAM,AAAC,WAAG,AAAK,WAAI,AAAM,MAAE,AAAC,KAAC,AAAQ,SAAC,AAAQ,AAAC,SAAE;AAClG,AAAI,aAAC,AAAQ,AAAG,yBAAa,AAAI,KAAC,AAAK,WAAI,AAAI,KAAC,AAAI,UAAI,AAAI,KAAC,AAAW,WAAE,AAC5E;AAAC;AAED,AAAU,eAAC,AAAe;AACxB,AAAM,eAAC,iBAAc,AAAU,mBAAG,AAAI,KAAC,AAAQ,uBAAa,AAAO,OAAE,KAAE,AAAI,KAAC,AAAI,AAAC,AACnF;AAAC;AAED,AAAe,oBAAC,AAAe;AAC7B,AAAM,eAAC,iBAAc,AAAc,mBAAG,AAAI,KAAC,AAAQ,uBAAa,AAAO,OAAQ,WAAE,AAAI,KAAC,AAAI,AAAC,AAC7F;AAAC;AAED,AAAa,kBAAC,AAAe;AAC3B,AAAM,gCAAe,AAAU,mBAAG,AAAI,KAAC,AAAQ,QAAW,cAAE,AAAI,KAAC,AAAI;AACnE,AAAI,kBAAE,AAAO,AACd,AAAC,AACJ;AAHyE,SAAhE;AAGR;AAED,AAAa,kBAAC,AAAe;AAC3B,AAAM,eAAC,iBAAc,AAAC,6BAAa,AAAI,KAAC,AAAK,WAAI,AAAI,KAAC,AAAI,UAAI,AAAI,KAAC,AAAW,0BAAa,AAAO,OAAE,KAAE,AAAI,KAAC,AAAI,MAAE,AAAI,MAAE,AAAQ,AAAC,AAClI;AAAC,AACH,AAAC;;AAnCY,QAAa,gBAmCzB",
  "sourcesContent": [
    "import { bintrayRequest } from \"./restApiRequest\"\n\nexport interface Version {\n  readonly name: string\n  //noinspection ReservedWordAsName\n  readonly package: string\n}\n\nexport interface File {\n  name: string\n  path: string\n\n  sha1: string\n  sha256: string\n}\n\nexport class BintrayClient {\n  private readonly basePath: string\n  readonly auth: string | null\n  readonly repo: string\n\n  constructor(public owner: string, public packageName: string, repo?: string, apiKey?: string | null) {\n    if (owner == null) {\n      throw new Error(\"owner is not specified\")\n    }\n    if (packageName == null) {\n      throw new Error(\"package is not specified\")\n    }\n\n    this.repo = repo || \"generic\"\n    this.auth = apiKey == null ? null : `Basic ${new Buffer(`${owner}:${apiKey}`).toString(\"base64\")}`\n    this.basePath = `/packages/${this.owner}/${this.repo}/${this.packageName}`\n  }\n\n  getVersion(version: string): Promise<Version> {\n    return bintrayRequest<Version>(`${this.basePath}/versions/${version}`, this.auth)\n  }\n\n  getVersionFiles(version: string): Promise<Array<File>> {\n    return bintrayRequest<Array<File>>(`${this.basePath}/versions/${version}/files`, this.auth)\n  }\n\n  createVersion(version: string): Promise<any> {\n    return bintrayRequest<Version>(`${this.basePath}/versions`, this.auth, {\n      name: version,\n    })\n  }\n\n  deleteVersion(version: string): Promise<any> {\n    return bintrayRequest(`/packages/${this.owner}/${this.repo}/${this.packageName}/versions/${version}`, this.auth, null, \"DELETE\")\n  }\n}"
  ]
}
