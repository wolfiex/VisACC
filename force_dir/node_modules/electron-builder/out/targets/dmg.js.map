{
  "version": 3,
  "file": "dmg.js",
  "sourceRoot": "",
  "sources": [
    "../../src/targets/dmg.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { deepAssign } from \"../util/deepAssign\"\nimport * as path from \"path\"\nimport { log, warn } from \"../util/log\"\nimport { Target, PlatformPackager } from \"../platformPackager\"\nimport { MacOptions, DmgOptions, DmgContent } from \"../options/macOptions\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport { debug, use, exec, statOrNull } from \"../util/util\"\nimport { copy, unlink, outputFile, remove } from \"fs-extra-p\"\nimport { executeFinally } from \"../util/promise\"\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"../util/awaiter\")\n\nexport class DmgTarget extends Target {\n  private helperDir = path.join(__dirname, \"..\", \"..\", \"templates\", \"dmg\")\n\n  constructor(private packager: PlatformPackager<MacOptions>) {\n    super(\"dmg\")\n  }\n\n  async build(appOutDir: string) {\n    const packager = this.packager\n    const appInfo = packager.appInfo\n    log(\"Creating DMG\")\n\n    const specification = await this.computeDmgOptions()\n\n    const tempDir = await packager.getTempFile(\"dmg\")\n    const tempDmg = path.join(tempDir, \"temp.dmg\")\n    const backgroundDir = path.join(tempDir, \".background\")\n    const backgroundFilename = specification.background == null ? null : path.basename(specification.background)\n    if (backgroundFilename != null) {\n      await copy(specification.background!, path.join(backgroundDir, backgroundFilename))\n    }\n\n    let preallocatedSize = 32 * 1024\n    if (specification.icon != null) {\n      const stat = await statOrNull(specification.icon)\n      if (stat != null) {\n        preallocatedSize += stat.size\n      }\n    }\n\n    // allocate space for .DS_Store\n    await outputFile(path.join(backgroundDir, \"DSStorePlaceHolder\"), new Buffer(preallocatedSize))\n\n    const volumeName = `${appInfo.productFilename} ${appInfo.version}`\n    //noinspection SpellCheckingInspection\n    await exec(\"hdiutil\", [\"create\",\n      \"-srcfolder\", backgroundDir,\n      \"-srcfolder\", path.join(appOutDir, `${packager.appInfo.productFilename}.app`),\n      \"-volname\", volumeName,\n      \"-anyowners\", \"-nospotlight\", \"-quiet\", \"-fs\", \"HFS+\", \"-fsargs\", \"-c c=64,a=16,e=16\",\n      \"-format\", \"UDRW\",\n      tempDmg,\n    ])\n\n    const volumePath = path.join(\"/Volumes\", volumeName)\n    if (await statOrNull(volumePath) != null) {\n      debug(\"Unmounting previous disk image\")\n      await detach(volumePath)\n    }\n\n    await attachAndExecute(tempDmg, true, async () => {\n      const promises = [\n        specification.background == null ? remove(`${volumePath}/.background`) : unlink(`${volumePath}/.background/DSStorePlaceHolder`),\n        exec(\"ln\", [\"-s\", \"/Applications\", `${volumePath}/Applications`]),\n      ]\n\n      let contents = specification.contents\n      if (contents == null) {\n        contents = [\n          {\n            \"x\": 130, \"y\": 220\n          },\n          {\n            \"x\": 410, \"y\": 220, \"type\": \"link\", \"path\": \"/Applications\"\n          }\n        ]\n      }\n\n      const location: DmgContent = contents.find(it => it.path == null && it.type !== \"link\")!\n      const applicationsLocation: DmgContent = contents.find(it => it.type === \"link\" && (it.path === \"/Applications\" || it.path === \"Applications\"))!\n\n      const window = specification.window!\n      const env = Object.assign({}, process.env, {\n        volumePath: volumePath,\n        appFileName: `${packager.appInfo.productFilename}.app`,\n        appFileX: location.x,\n        appFileY: location.y,\n        APPLICATIONS_LINK_X: applicationsLocation.x,\n        APPLICATIONS_LINK_Y: applicationsLocation.y,\n        iconSize: specification.iconSize || 80,\n        iconTextSize: specification.iconTextSize || 12,\n\n        windowX: window.x,\n        windowY: window.y,\n\n        VERSIONER_PERL_PREFER_32_BIT: \"true\",\n      })\n\n      if (specification.icon == null) {\n        delete env.volumeIcon\n      }\n      else {\n        const volumeIcon = `${volumePath}/.VolumeIcon.icns`\n        promises.push(copy(path.resolve(packager.projectDir, specification.icon), volumeIcon))\n        env.volumeIcon = volumeIcon\n      }\n\n      await BluebirdPromise.all<any>(promises)\n\n      if (specification.backgroundColor != null || specification.background == null) {\n        env.backgroundColor = specification.backgroundColor || \"#ffffff\"\n        env.windowWidth = window.width || 540\n        env.windowHeight = window.height || 380\n      }\n      else {\n        delete env.backgroundColor\n\n        if (window.width == null) {\n          delete env.windowWidth\n        }\n        else {\n          env.windowWidth = window.width\n        }\n        if (window.height == null) {\n          delete env.windowHeight\n        }\n        else {\n          env.windowHeight = window.height\n        }\n\n        env.backgroundFilename = backgroundFilename\n      }\n\n      await exec(\"/usr/bin/perl\", [path.join(this.helperDir, \"dmgProperties.pl\")], {\n        cwd: this.helperDir,\n        env: env\n      })\n\n      await exec(\"sync\")\n    })\n\n    const artifactPath = path.join(appOutDir, `${appInfo.productFilename}-${appInfo.version}.dmg`)\n    //noinspection SpellCheckingInspection\n    await exec(\"hdiutil\", [\"convert\", tempDmg, \"-format\", packager.devMetadata.build.compression === \"store\" ? \"UDRO\" : \"UDBZ\", \"-imagekey\", \"zlib-level=9\", \"-o\", artifactPath])\n    await exec(\"hdiutil\", [\"internet-enable\", \"-no\", artifactPath])\n\n    this.packager.dispatchArtifactCreated(artifactPath, `${appInfo.name}-${appInfo.version}.dmg`)\n  }\n\n  // public to test\n  async computeDmgOptions(): Promise<DmgOptions> {\n    const packager = this.packager\n    const specification: any = deepAssign({\n      window: {\n        x: 400,\n        y: 100,\n      },\n    }, Object.assign({}, this.packager.devMetadata.build.osx, packager.devMetadata.build.dmg))\n\n    // appdmg\n    const oldPosition = specification.window.position\n    if (oldPosition != null) {\n      specification.window.x = oldPosition.x\n      specification.window.y = oldPosition.y\n    }\n\n    const oldSize = specification.window.size\n    if (oldSize != null) {\n      specification.window.width = oldSize.width\n      specification.window.height = oldSize.height\n    }\n\n    if (specification[\"icon-size\"] != null) {\n      if (specification.iconSize == null) {\n        specification.iconSize = specification[\"icon-size\"]\n      }\n      warn(\"dmg.icon-size is deprecated, please use dmg.iconSize instead\")\n    }\n\n    if (specification.title != null) {\n      warn(\"dmg.title is not supported, file issue if need\")\n    }\n\n    if (!(\"icon\" in specification)) {\n      use(await packager.getIconPath(), it => {\n        specification.icon = it\n      })\n    }\n\n    if (specification[\"background-color\"] != null) {\n      if (specification.backgroundColor == null) {\n        specification.backgroundColor = specification[\"background-color\"]\n      }\n      warn(\"dmg.background-color is deprecated, please use dmg.backgroundColor instead\")\n    }\n\n    if (specification.backgroundColor != null) {\n      if (specification.background != null) {\n        throw new Error(\"Both dmg.backgroundColor and dmg.background are specified — please set the only one\")\n      }\n\n      specification.backgroundColor = require(\"parse-color\")(specification.backgroundColor).hex\n    }\n\n    if (specification.backgroundColor == null && !(\"background\" in specification)) {\n      const resourceList = await packager.resourceList\n      if (resourceList.includes(\"background.tiff\")) {\n        specification.background = path.join(packager.buildResourcesDir, \"background.tiff\")\n      }\n      else if (resourceList.includes(\"background.png\")) {\n        specification.background = path.join(packager.buildResourcesDir, \"background.png\")\n      }\n      else {\n        specification.background = path.join(this.helperDir, \"background.tiff\")\n      }\n    }\n\n    if (specification.format == null) {\n      specification.format = packager.devMetadata.build.compression === \"store\" ? \"UDRO\" : \"UDBZ\"\n    }\n\n    return specification\n  }\n}\n\nasync function detach(name: string) {\n  try {\n    await exec(\"hdiutil\", [\"detach\", name])\n  }\n  catch (e) {\n    await new BluebirdPromise((resolve, reject) => {\n      setTimeout(() => {\n        exec(\"hdiutil\", [\"detach\", \"-force\", name])\n          .then(resolve)\n          .catch(reject)\n      }, 1000)\n    })\n  }\n}\n\nexport async function attachAndExecute(dmgPath: string, readWrite: boolean, task: () => Promise<any>) {\n  //noinspection SpellCheckingInspection\n  const args = [\"attach\", \"-noverify\", \"-noautoopen\"]\n  if (readWrite) {\n    args.push(\"-readwrite\")\n  }\n  args.push(dmgPath)\n  const attachResult = await exec(\"hdiutil\", args, {maxBuffer: 1024 * 1024})\n  const deviceResult = attachResult == null ? null : /^(\\/dev\\/\\w+)/.exec(attachResult)\n  const device = deviceResult == null || deviceResult.length !== 2 ? null : deviceResult[1]\n  if (device == null) {\n    throw new Error(`Cannot mount: ${attachResult}`)\n  }\n\n  await executeFinally(task(), () => detach(device))\n}"
  ]
}
