<!DOCTYPE html>
<meta charset="utf-8">
<title>Kernel Density Estimation</title>
<style>

body {
  font: 10px sans-serif;
}

.bar {
  fill: #bbb;
  shape-rendering: crispEdges;
}

.line {
  fill: none;
  stroke: #000;
  stroke-width: 1.5px;
}

.axis path,
.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.y.axis path {
  display: none;
}

</style>
<body>
<script src="./d3.v4.min.js"></script>
<script src="../ThreeDee/d3.v3.js"></script>

<script>
const electron = require('electron');
var ipc = electron.ipcRenderer;
ipc.on('data', (event,arg)=> {


  console.log(event,arg);
  arg.values.filter(function(d){recieveddata.push(100*d)},recieveddata=[]);

    var margin = {top: 20, right: 30, bottom: 30, left: 40},
        width = window.innerWidth - margin.left - margin.right,
        height = window.innerHeight - margin.top - margin.bottom;

    var x = d3.scale.linear()
        .domain([0, 100])
        .range([0, width]);

    var histogram = d3.layout.histogram()
        .frequency(false)
        .bins(x.ticks(10));


    colour = d3.interpolate("#F6089E", "#3864EB")
    //recieveddata = d3.range(1000).map(function(d){return Math.random()*100});

    var data = histogram(recieveddata),
          kde = kernelDensityEstimator(epanechnikovKernel(7), x.ticks(100));


    data.filter(function(d){maxarr.push(d.y)},maxarr=[] ) ;

    var y = d3.scale.linear()
        .domain([0, d3.max(maxarr)*1.1])
        .range([height, 0]);

    var xAxis = d3.svg.axis()
        .scale(x)
        .orient("bottom");

    var yAxis = d3.svg.axis()
        .scale(y)
        .orient("left")
        .tickFormat(d3.format("%"));

    var line = d3.svg.line()
        .x(function(d) { return x(d[0]); })
        .y(function(d) { return y(d[1]); });



    var svg = d3.select("body").append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
      .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    svg.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + height + ")")
        .call(xAxis)
      .append("text")
        .attr("class", "label")
        .attr("x", width)
        .attr("y", -height+16)//-6
        .style("text-anchor", "end")
        .text("Binned Normalised Flux Distribution");

    svg.append("g")
        .attr("class", "y axis")
        .call(yAxis);


      svg.selectAll(".bar")
          .data(data)
        .enter().insert("rect", ".axis")
          .attr("class", "bar")
          .style('fill', function(d){return colour((d.x+(d.dx/2))/100)})
          .attr("x", function(d) { return x(d.x) + 1; })
          .attr("y", function(d) { return y(d.y); })
          .attr("width", x(data[0].dx + data[0].x) - x(data[0].x) - 1)
          .attr("height", function(d) { return height - y(d.y); });

      svg.append("path")
          .datum(kde(recieveddata))
          .attr("class", "line")
          .attr("d", line);

});




function kernelDensityEstimator(kernel, x) {
  return function(sample) {
    return x.map(function(x) {
      return [x, d3.mean(sample, function(v) { return kernel(x - v); })];
    });
  };
}

function epanechnikovKernel(scale) {
  return function(u) {
    return Math.abs(u /= scale) <= 1 ? .75 * (1 - u * u) / scale : 0;
  };
}

</script>
0
